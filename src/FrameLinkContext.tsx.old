import FrameLink, {
  TFrameLink,
  TPostMessage,
  TRegisterTarget,
  TRemoveListener,
} from "frame-link";
import {
  createContext,
  ReactNode,
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState,
} from "react";
import useListeners from "./useListeners";

export type TAddListener = (key: string, callBack?: any, once?: boolean) => any;

export type TFrameLinkReact = {
  addListener: TAddListener;
  postMessage: TPostMessage;
  removeListener: TRemoveListener;
  registerTarget: TRegisterTarget;
  listen: (key: string, callback: any) => void;
  ready: boolean;
  connected: boolean;
};

export const FrameLinkContext = createContext({} as TFrameLinkReact);

export default function FrameLinkProvider({
  children,
}: {
  children: ReactNode;
}) {
  const [ready, setReady] = useState(false);
  const [connected, setConnected] = useState(false);
  const frameLink = useRef<TFrameLink | undefined>();
  const { addListener, listen } = useListeners(frameLink);

  useEffect(() => {
    frameLink.current = FrameLink((connected) => {
      setConnected(connected);
    });
    setReady(true);
  }, []);

  useEffect(() => {
    console.log("frame-link-react ready", ready);
  }, [ready]);

  useEffect(() => {
    console.log("frame-link-react connected", connected);
  }, [connected]);

  useEffect(() => {
    console.log("frame-link-react addListener cause rerender");
  }, [addListener]);

  console.log("framelink provider render");
  return (
    <FrameLinkContext.Provider
      value={
        {
          ...frameLink.current,
          addListener,
          listen,
          ready,
          connected,
        } as TFrameLinkReact
      }
    >
      {children}
    </FrameLinkContext.Provider>
  );
}
