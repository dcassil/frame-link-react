import { TFrameLink } from "frame-link";
import { useEffect, useRef, useState } from "react";
import { createStore, Store } from "state-pool";
import { TAddListener } from "./FrameLinkContext";

export default function useListeners(
  frameLink: React.MutableRefObject<TFrameLink | undefined>
) {
  const store = createStore();
  const listeners = useRef({});

  const _listen = (key: any, callback: (data: any) => void) => {
    if (!store.has(key)) {
      store.setState(key, {});
    }

    console.log("subscribe to state", key);
    return store.getState(key).subscribe((data: any) => {
      console.log("trigger to state", key);
      callback(data);
    });
  };

  const listen = (key: never, callback: (data: any) => void) => {
    if (!listeners.current) {
      throw new Error("Listen used outside of useEffect.");
      return;
    }

    listeners.current[key] = listeners.current[key] || _listen(key, callback);
  };

  const addListener: TAddListener = (
    key: string,
    callback: (data: any) => any
  ) => {
    if (frameLink?.current) {
      if (!store.has(key)) {
        store.setState(key, {});
      }
      const [, , updateState] = store.useState(key);
      frameLink.current.addListener(key, (data: any) => {
        console.log("state tore update", key);
        updateState(data);

        return callback ? callback(data) : undefined;
      });
    } else {
      throw new Error("attempted to call framelink before it was ready");
    }
  };

  return {
    listen,
    addListener,
  };
}
